{
	"type": "object",
	"$id": "https://packwiz.infra.link/meta/format/v1/strict/meta.json",
	"$schema": "http://json-schema.org/draft-07/schema",
	"title": "meta.pw.toml",
	"description": "A metadata file which references a file from an external server. This allows for sided mods, optional mods and stores metadata to allow finding updates from Modrinth and CurseForge. Mods are typically referenced externally, but any type of file is supported, including resource packs and shader packs.\n\nAny filename should be supported for these metadata files, but the `.pw.toml` extension should be encouraged as this can be automatically marked as `metafile = true` by tools, and this file extension may be required in future versions. A lowercase kebab-cased slug is conventionally used for the filename, typically the same as the slug of the project from which the file was downloaded. This filename should stay consistent when a file is updated, to ensure that optional file choices are preserved.\n\nTools must treat files with `metafile = true` in the index as metadata files regardless of extension, for backwards compatibility with older packs that don't use the extension. Tools may treat files with the .pw.toml extension as metadata files even without `metafile = true`, ideally updating the index to ensure consistency.",
	"examples": [
		"name = \"Borderless Mining\"\nfilename = \"borderless-mining-1.1.5+1.19.jar\"\nside = \"client\"\n\n[download]\nurl = \"https://cdn.modrinth.com/data/kYq5qkSL/versions/1.1.5+1.19/borderless-mining-1.1.5%2B1.19.jar\"\nhash-format = \"sha1\"\nhash = \"08f98e28057a0fbdb288c947b7871def4b18b176\"\n\n[update]\n[update.modrinth]\nmod-id = \"kYq5qkSL\"\nversion = \"gqoXgtxO\"\n"
	],
	"x-packwiz-spec-gen": {
		"exampleDoc": "See the full example: `borderless-mining.pw.toml` in [the example pack on GitHub](https://github.com/packwiz/packwiz-example-pack/blob/v1/mods/borderless-mining.pw.toml)."
	},
	"properties": {
		"name": {
			"description": "A human-readable name for the file, which can be displayed in user interfaces. It does not need to be unique between files, although this may cause confusion.",
			"examples": [
				"Borderless Mining"
			],
			"type": "string"
		},
		"filename": {
			"type": "string",
			"description": "The destination path of the referenced file, relative to this file.\n\nA relative path using forward slashes. Must not reference a file outside the pack root, and should not include characters or filenames restricted on common operating systems.\n\nImplementations must support special characters including those that are percent-encoded in URLs, such as spaces and square brackets. Implementations must guard against path traversal attacks and manually validate paths.",
			"pattern": "^([^/\\x00-\\x1F\\x7F\"*/:<>?\\\\|]+\\/)*[^/\\x00-\\x1F\\x7F\"*/:<>?\\\\|]*$",
			"examples": [
				"borderless-mining-1.1.5+1.19.jar"
			]
		},
		"side": {
			"description": "The side on which this file should be installed.\n\nA physical Minecraft side. Server applies to the dedicated server, client applies to the client (and integrated server), and both applies to every installation.",
			"enum": [
				"both",
				"client",
				"server"
			],
			"default": "both",
			"type": "string"
		},
		"download": {
			"type": "object",
			"description": "Information about how to download the external file.",
			"properties": {
				"url": {
					"type": "string",
					"description": "The URL to download the file from.\n\nAn absolute URI compliant with RFC 3986. Implementations may need to be more lenient in accepting reserved characters in paths due to historical implementation bugs. Only the HTTP/HTTPS protocols must be supported, other protocols should not be used.",
					"format": "uri"
				},
				"hash": {
					"type": "string",
					"description": "The hash of the specified file, as a string.\n\nBinary hashes should be stored as hexadecimal, and case should be ignored during parsing. Numeric hashes (e.g. Murmur2) should still be stored as a string, to ensure the value is preserved correctly.",
					"examples": [
						"08f98e28057a0fbdb288c947b7871def4b18b176"
					]
				},
				"hash-format": {
					"type": "string",
					"description": "The hash format for the hash of the specified file.\n\nThe hash algorithm used to determine if a file is valid. All functions listed must be supported by tools implementing the packwiz pack format.",
					"enum": [
						"sha256",
						"sha512",
						"sha1",
						"md5",
						"murmur2"
					],
					"x-taplo": {
						"docs": {
							"enumValues": [
								"The SHA2-256 hashing standard. Used by default for metadata files.",
								"The SHA2-512 hashing standard.",
								"The SHA1 hashing standard.",
								"The MD5 hashing standard.",
								"The CurseForge variant of MurmurHash2: MurmurHash2 32-bit hashing standard (seed 1) with some characters removed before applying the hash (decimal bytes 9, 10, 13, 32), stored as an unsigned integer.\n\nIn Java, use Integer.parseUnsignedInt to parse this value."
							]
						}
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"url",
				"hash",
				"hash-format"
			]
		},
		"option": {
			"type": "object",
			"description": "Information about the optional state of this file. When excluded, this indicates that the file is not optional.",
			"properties": {
				"optional": {
					"description": "Whether or not the file is optional. This can be set to false if you want to keep the description but make the file required.",
					"default": false,
					"type": "boolean"
				},
				"description": {
					"description": "A description displayed to the user when they select options. This should explain why or why not the user should enable the file.",
					"type": "string"
				},
				"default": {
					"description": "If true, the file will be enabled by default. If false, the file will be disabled by default. If a pack format does not support optional files but it does support disabling them, the file will be disabled if it defaults to being disabled.",
					"default": false,
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"required": [
				"optional"
			]
		},
		"update": {
			"type": "object",
			"description": "Information about how to update the download details of this metadata file with tools.\n\nIf this object does not exist or there are no defined update sources, the file will not be automatically updated.\n\nIf there are multiple defined update sources, one of them will be chosen. The source that is chosen is not defined, so it is therefore dependent on the implementation of the tool (may not be deterministic, so do not rely on one source being chosen over another).",
			"additionalProperties": {
				"type": "object",
				"title": "Other update sources",
				"description": "Implementations are free to support other update sources, but it would be beneficial to document and standardise these."
			},
			"properties": {
				"curseforge": {
					"type": "object",
					"description": "An update source for updating files downloaded from CurseForge.",
					"properties": {
						"project-id": {
							"description": "An integer representing the unique project ID of this file. Updating will retrieve the latest file for this project ID that is valid (correct Minecraft version, release channel, modloader, etc.).",
							"examples": [
								327154
							],
							"type": "number"
						},
						"file-id": {
							"description": "An integer representing the unique file ID of this file. This can be used if more metadata needs to be obtained relating to the file, or for CurseForge pack exports.",
							"examples": [
								3643025
							],
							"type": "number"
						}
					},
					"additionalProperties": false,
					"required": [
						"project-id",
						"file-id"
					]
				},
				"modrinth": {
					"type": "object",
					"description": "An update source for updating files downloaded from Modrinth.",
					"properties": {
						"mod-id": {
							"description": "A string representing the unique project ID of this file. Updating will retrieve the latest file for this project ID that is valid (correct Minecraft version, release channel, modloader, etc.).",
							"examples": [
								"kYq5qkSL"
							],
							"type": "string"
						},
						"version": {
							"description": "A string representing the unique version ID of this file. This can be used if more metadata needs to be obtained relating to the file.",
							"examples": [
								"gqoXgtxO"
							],
							"type": "string"
						}
					},
					"additionalProperties": false,
					"required": [
						"mod-id",
						"version"
					]
				}
			},
			"required": []
		}
	},
	"additionalProperties": false,
	"required": [
		"name",
		"filename",
		"download"
	]
}